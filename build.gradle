apply plugin: 'com.google.osdetector'
apply plugin: 'de.undercouch.download'
import de.undercouch.gradle.tasks.download.Download

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2"
    }
  }
  dependencies {
      classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.4.0"
      classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.0'
      classpath 'de.undercouch:gradle-download-task:3.1.2'
  }
}

apply plugin: 'com.google.protobuf'
apply plugin: 'java'

repositories {
   mavenCentral()
   maven {
       url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

compileJava.options.encoding = 'UTF-8'
protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.1.0'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.1'
    }
  }
  generatedFilesBaseDir = "$projectDir/generated/"
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

configurations {
    all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'
}

dependencies {
    compile group: 'org.boofcv', name: 'all', version: '0.26'
	compile group: 'org.jcodec', name: 'jcodec-javase', version: '0.1.9'
	compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.6'
	compile group: 'com.google.code.jlibav', name: 'jlibav', version: '0.2.1'
	compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
	compile group: 'com.google.guava', name: 'guava', version: '19.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.5'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.8'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
	compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.1.0'
	compile group: 'io.grpc', name: 'grpc-netty', version: '1.0.2'
	compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.0.2'
	compile group: 'io.grpc', name: 'grpc-stub', version: '1.0.2'
    compile group: 'org.bytedeco', name: 'javacpp', version: '1.2.3'
    compile group: 'net.coobird', name: 'thumbnailator', version: '[0.4, 0.5)'
	compile group: 'org.jgrapht', name: 'jgrapht-core', version: '1.0.0'
    /**
     * Manual Fixes for the javacpp-devs because of naming conventions & versions. Each os is handled independently
     */
    if(osdetector.os.equals('windows')){
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.8.0-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.8.0-1.2', classifier: osdetector.classifier
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2', classifier: osdetector.classifier
    }
    if(osdetector.os.contains('linux')){
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.9.0-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.9.0-1.2', classifier: osdetector.classifier
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2', classifier: osdetector.classifier
    }
    if(osdetector.os.equals('osx')){
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.9.0-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'tensorflow', version: '0.9.0-1.2', classifier: 'mac' + osdetector.classifier
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2'
        compile group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: '3.0.2-1.2', classifier: 'mac' + osdetector.classifier
    }
}
configurations {
    all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'
}

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir 'generated/main/java'
            srcDir 'generated/main/grpc'
        }
		resources {
			srcDir 'config'
		}
		proto {
			srcDir 'adampro-grpc/src/main/protobuf'
		}
    }
}

jar {
	manifest { 
		attributes 'Main-Class': 'org.vitrivr.cineast.api.API'
	}  

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
	
	archiveName = 'cineast.jar'
}

task downloadExternalFiles(type: Download){
	src 'http://download.vitrivr.org/vgg16.tfmodel'
	dest 'resources/vgg16'
}

task copyResources() << {
	copy {
		from "cineast.json"
		into "$buildDir/libs/"
	}
	copy {
		from "resources"
		into "$buildDir/libs/resources/"
	}
	
}
	
task deploy(dependsOn: [build, jar, copyResources])
